object Main {
  val strToFormat = "http://allaboutscala.com/scala-exercises"
  val reversedAndToUpperCase = strToFormat.reverse.toUpperCase()


  def main(args: Array[String]): Unit = {
    println(s"$strToFormat reversed and then to upper case = $reversedAndToUpperCase")

  }
}
sol-
http://allaboutscala.com/scala-exercises reversed and then to upper case = SESICREXE-ALACS/MOC.ALACSTUOBALLA//:PTTH
---


object Main {
  val donutName = "Vanilla Donut"
  val quantityPurchased = 10
  val price = 2.50
  val donutJson =
    s"""
       |{
       |"donut_name":"$donutName",
       |"quantity_purchased":"$quantityPurchased",
       |"price":$price
       |}
       """.stripMargin

  def main(args: Array[String]): Unit = {
    println(donutJson)
  }
}

sol-
{
"donut_name":"Vanilla Donut",
"quantity_purchased":"10",
"price":2.5
}

----

import scala.io.StdIn._
object Main {
  val name = readLine("Enter your name: ")
  println("Enter your age: ")
  val age = readInt()
  println(Console.BOLD)
  print("Name: ")
  print(Console.UNDERLINED)
  print(name)
  println(Console.BOLD)
  print("Age: ")
  print(Console.RESET)
  print(age)


  def main(args: Array[String]): Unit = {

  }
}

sol-
Enter your name: Ram
Enter your age: 
34

Name: Ram
Age: 34

---
object Main {

  val str = "http://allaboutscala.com"
  val charToFind = str.charAt(7)
  println(s"The 8th character literal in $str = $charToFind")



  def main(args: Array[String]): Unit = {

  }
}

sol-
The 8th character literal in http://allaboutscala.com = a

---
object Main {

  val glazedDonut = "Glazed Donut"
  val unitPrice = 2.50
  val qtyPurchased = 10
  val totalCost = qtyPurchased * unitPrice
  println(s"Total cost of $qtyPurchased $glazedDonut = $$$totalCost")
  // println(f"""Total cost of $qtyPurchased $glazedDonut${if (qtyPurchased > 1) "s" else ""} = $$$totalCost%1.2f""")
  println(f"""Total cost of $qtyPurchased $glazedDonut = $$$totalCost%1.2f""")


  def main(args: Array[String]): Unit = {

  }
}

sol-
Total cost of 10 Glazed Donut = $25.0
Total cost of 10 Glazed Donut = $25.00

---

object Main {
  val firstName = "abhi"
  val lastName = "rana"
  val favoriteMovie = "queen"
  val output =
    s"""
       | First Name: $firstName
       | Last Name: $lastName
       | Favorite Movie: $favoriteMovie
  """.stripMargin


  def main(args: Array[String]): Unit = {
    println(s"$firstName $lastName likes the movie $favoriteMovie")
    println(output)

  }
}

sol-
abhi rana likes the movie queen

 First Name: abhi
 Last Name: rana
 Favorite Movie: queen
 

----

object Main {
  val donutBoughtStr = "Vanilla Donut 10 2.25"
  val splitStr = donutBoughtStr.split(" ")
  val donutType = splitStr(0)
  val donutName = splitStr(1)
  val donutQty = splitStr(2).toInt
  val donutPrice = splitStr(3).toDouble
  val donutOutput =
    s"""
       |Donut Name: $donutType $donutName
       |Donut Price: $$$donutPrice
       |Donut Purchased: $donutQty
""".stripMargin



  def main(args: Array[String]): Unit = {
    println(donutType)
    println(donutName)
    println(donutOutput)
  }
}

sol-

Vanilla
Donut

Donut Name: Vanilla Donut
Donut Price: $2.25
Donut Purchased: 10

---
object Main {
  val mymap: Map[String, Int] = Map("Tommy" -> 11, "Jonny" -> 8, "Cindy" -> 13, "Bill" -> 9)



  def main(args: Array[String]): Unit = {
    println(s"Children to ages in reverse order by their names = $mymap")
  }
}

sol-
Children to ages in reverse order by their names = Map(Tommy -> 11, Jonny -> 8, Cindy -> 13, Bill -> 9)

---

object Main {
  val setBasketOne = Set("Cake", "Milk", "Cheese", "Toilet Paper")
  val setBasketTwo = Set("Bread", "Water", "Juice", "Milk", "Cheese")
  val commonItems = setBasketOne intersect setBasketTwo
  println(
    s"""
       |Shopping Basket One = ${setBasketOne.mkString(" - ")}
       |Shopping Basket Two = ${setBasketTwo.mkString(" - ")}
       |Common items are:
  """.stripMargin)

  commonItems.foreach(i => println(i.toUpperCase()))



  def main(args: Array[String]): Unit = {

  }
}

sol-
Shopping Basket One = Cake - Milk - Cheese - Toilet Paper
Shopping Basket Two = Water - Milk - Juice - Cheese - Bread
Common items are:
  
MILK
CHEESE

---
object Main {
  val shoppingBasket = Seq("Milk", "Cheese", "Donuts", "Apples", "Bananas")
  val filterFruitItemsF: (String) => Boolean = (s) => s == "Apples" || s == "Bananas"
  val basketWithoutFruits = shoppingBasket.filterNot(filterFruitItemsF)
  println(basketWithoutFruits.mkString("<items values= \"", "|", "\"></items>"))


  
  def main(args: Array[String]): Unit = {

  }
}

sol-
<items values= "Milk|Cheese|Donuts"></items>

---
object Main {
  val codes = Seq("A", "BB", "CCC", "DDDD", "EEEEE")
  val codesWithLength = codes.map { code =>
    s"$code - ${code.length}"
  }

  codesWithLength.foreach(println(_))



  def main(args: Array[String]): Unit = {

  }

sol-
A - 1
BB - 2
CCC - 3
DDDD - 4
EEEEE - 5

---

object Main {
  val item1 = Tuple3("T-Shirt", "Medium", 10.99)
  val item2 = Tuple3("Polo-Shirt", "Large", 4.99)
  val item3 = Tuple3("Vest", "Small", 5.99)
  val item4 = Tuple3("T-Shirt", "Small", 4.99)
  val item5 = Tuple3("T-Shirt", "Small", 4.99)

  val shoppingBasket = List(item1, item2, item3, item4, item5)
  shoppingBasket.foreach {
    case item if item._1 == "T-Shirt" =>
      println(s"${item._1.toUpperCase()} is priced at $$${item._3} for the ${item._2} size.")
    case item =>
      println(s"${item._1.toLowerCase()} is priced at $$${item._3} for the ${item._2} size.")
  }


  def main(args: Array[String]): Unit = {

  }
}

sol-
T-SHIRT is priced at $10.99 for the Medium size.
polo-shirt is priced at $4.99 for the Large size.
vest is priced at $5.99 for the Small size.
T-SHIRT is priced at $4.99 for the Small size.
T-SHIRT is priced at $4.99 for the Small size.

----

object Main {

  val list1 = List("pencil", "pen", "sharpener")
  val list2 = List("math book", "french book", "english book")
  val combinedList: List[List[String]] = List(list1, list2)
  combinedList
    .flatten
    .map(_ + " is required in the classroom.")
    .foreach(println(_))


  def main(args: Array[String]): Unit = {

  }
}

sol-
pen is required in the classroom.
sharpener is required in the classroom.
math book is required in the classroom.
french book is required in the classroom.
english book is required in the classroom.

----


object Main {
  val listRange = List.range(100, 150, 10)
  val listRangeAsStr = listRange.mkString(", ")
  println(listRange)
  println(s"Elements of List from 100 to 150, excluding the 150 number literal = $listRangeAsStr")
  println(s"Sum for elements in the List = ${listRange.sum}")




  def main(args: Array[String]): Unit = {

  }
}

sol-
List(100, 110, 120, 130, 140)
Elements of List from 100 to 150, excluding the 150 number literal = 100, 110, 120, 130, 140
Sum for elements in the List = 600

---
object Main {
  val vecNumbers = Vector(0, 10, 20, 47, -2, 99, -98)
  println(s"The smallest item in the Vector = ${vecNumbers.min}")
  println(s"The largest item in the Vector = ${vecNumbers.max}")




  def main(args: Array[String]): Unit = {

  }
}

sol-
The smallest item in the Vector = -98
The largest item in the Vector = 99

---
object Main {
  val setOne = Set(1, 3, 5, 10, 20)
  val setTwo = Set(20, 17, 18, 99, 0)

  val diffSetOneVSSetTwo = setOne -- setTwo
  val diffSetTwoVSSetOne = setTwo -- setOne

  println(s"Number literals in set one but not in set two = $diffSetOneVSSetTwo")
  println(s"Number literals in set two but not in set one = $diffSetTwoVSSetOne")



  def main(args: Array[String]): Unit = {

  }
}

sol-
Number literals in set one but not in set two = HashSet(5, 10, 1, 3)
Number literals in set two but not in set one = HashSet(0, 17, 18, 99)

---
object Main {
  val seqOne = Seq(99.5, 100.0, 50.0, 55.0, 70.0, 100.0, -1.0)
  val seqTwo = Seq(10.0, 20.0, 30.0, 40.0, 50.0)
  val combinedNumbers = seqOne ++ seqTwo

  // implicit val doubleOrdering = Ordering.Double.TotalOrdering
  val minNumber = combinedNumbers.min
  val maxNumber = combinedNumbers.max

  println(s"Combined number literals = $combinedNumbers")
  println(s"Lowest number literal = $minNumber")
  println(s"Largest number literal = $maxNumber")



  def main(args: Array[String]): Unit = {

  }
}

sol-
Combined number literals = List(99.5, 100.0, 50.0, 55.0, 70.0, 100.0, -1.0, 10.0, 20.0, 30.0, 40.0, 50.0)
Lowest number literal = -1.0
Largest number literal = 100.0

---

object Main {

  val numberSeq = Seq(2, 8, 19, 20, 25, 50, 100, 10)
  val divByTwoF: (Int) => Boolean = (i) => i % 2 == 0
  println(
    """
      |Starting from left to right, removing items that are factors of two, and will
      |stop execution on the first element that is not divisible by two:
   """.stripMargin)
  numberSeq
    .dropWhile(divByTwoF)
    .foreach(println(_))



  def main(args: Array[String]): Unit = {

  }
}

sol-
20
25
50
100
10

---

object Main {

  val nameAndAge = Seq(
    "James", 7,
    "Andy", 8,
    "Tommy", 10,
    "Bob", 13,
    "Sam", 10
  )

  val ageSeq = nameAndAge.collect {
    case age: Int => age
  }

  println(s"Combined sequence of names to ages = ${nameAndAge.mkString(",")}")
  println(s"Sum of ages = ${ageSeq.sum}")



  def main(args: Array[String]): Unit = {

  }
}

sol-

Combined sequence of names to ages = James,7,Andy,8,Tommy,10,Bob,13,Sam,10
Sum of ages = 48

----
object Main {

  val oddNumbers = (300 to 340)
    .filter(_ % 2 != 0)
   // .take(20)
    .toList
    .mkString("||")

  println("Odd numbers between 300 and 340 = ")
  println(oddNumbers)

  def main(args: Array[String]): Unit = {

  }
}

sol-
Odd numbers between 300 and 340 = 
301||303||305||307||309||311||313||315||317||319||321||323||325||327||329||331||333||335||337||339
