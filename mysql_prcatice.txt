SELECT year, month, month_name, west, midwest, south, northeast FROM tutorial.us_housing_units
--
SELECT *
  FROM tutorial.us_housing_units
 LIMIT 15
--
SELECT year,
       month,
       west,
       south,
       midwest,
       northeast,
       west + south + midwest +northeast as total
  FROM tutorial.us_housing_units
 -- 
  SELECT year,
       month,
       west,
       south,
       midwest,
       northeast
  FROM tutorial.us_housing_units
  WHERE west > (midwest + northeast)
--  
SELECT year,
       month,
       west/(west + south + midwest + northeast)*100 AS west_pct,
       south/(west + south + midwest + northeast)*100 AS south_pct,
       midwest/(west + south + midwest + northeast)*100 AS midwest_pct,
       northeast/(west + south + midwest + northeast)*100 AS northeast_pct
  FROM tutorial.us_housing_units
 WHERE year >= 2000
 --
SELECT * FROM tutorial.billboard_top_100_year_end WHERE group_name ILIKE '%ludacris%'

SELECT * FROM tutorial.billboard_top_100_year_end WHERE group_name LIKE 'DJ%'

SELECT * FROM tutorial.billboard_top_100_year_end

SELECT * FROM tutorial.billboard_top_100_year_end
WHERE artist IN ('M.C. Hammer', 'Hammer', 'Elvis Presley')

--
SELECT * from tutorial.billboard_top_100_year_end where year between 1985 AND 1990
--
SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE song_name IS NULL
 
 --
 SELECT * FROM tutorial.billboard_top_100_year_end
 WHERE year_rank <= 10 AND group_name ILIKE '%ludacris%'
 --
 select song_name, artist FROM tutorial.billboard_top_100_year_end
 WHERE year between 1960 AND 1969 and song_name ILIKE '%love%'
 
 --
SELECT * FROM tutorial.billboard_top_100_year_end
WHERE year_rank <= 10 AND (group_name ILIKE '%Katy Perry%' or group_name ilike '%Bon Jovi%')

--
SELECT * FROM tutorial.billboard_top_100_year_end
WHERE year_rank <= 10 AND ("group_name" ILIKE '%katy perry%' OR "group_name" ILIKE '%bon jovi%')

--
SELECT * FROM tutorial.billboard_top_100_year_end
where song_name ilike '%california%' and (year between 1970 and 1979 or  year between 1990 and 1999) 

--
SELECT * FROM tutorial.billboard_top_100_year_end
where year_rank <=100 and group_name ilike '%dr. dre%' 
and (year < 2001 or year> 2009)

--
SELECT * FROM tutorial.billboard_top_100_year_end
where group_name ilike '%dr. dre%' 
and (year < 2001 or year> 2009)

--
SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE "group_name" ILIKE '%dr. dre%'
   AND (year <= 2000 OR year >= 2010)
 
--  
SELECT * FROM tutorial.billboard_top_100_year_end
where year =2013 and song_name not ilike '%a%'

--
SELECT * FROM tutorial.billboard_top_100_year_end
WHERE song_name NOT ILIKE '%a%' AND year = 2013
 
--       

SELECT * FROM tutorial.billboard_top_100_year_end
where year = 2012 order by song_name desc

--
SELECT * FROM tutorial.billboard_top_100_year_end
where year=2010 order by year_rank, artist

--
SELECT * FROM tutorial.billboard_top_100_year_end
where group_name ilike '%t-pain%' order by year_rank desc

--
SELECT * FROM tutorial.billboard_top_100_year_end
where year_rank between 10 and 20 and (year= 1993 or year= 2003 or year=2013)
order by year, year_rank

--
SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year IN (2013, 2003, 1993)  --Select the relevant years
   AND year_rank BETWEEN 10 AND 20  --Limit the rank to 10-20
 ORDER BY year, year_rank

--

SELECT * FROM tutorial.aapl_historical_stock_price
--
SELECT count(low) as low FROM tutorial.aapl_historical_stock_price
--
SELECT COUNT(year) AS year,
       COUNT(month) AS month,
       COUNT(open) AS open,
       COUNT(high) AS high,
       COUNT(low) AS low,
       COUNT(close) AS close,
       COUNT(volume) AS volume
  FROM tutorial.aapl_historical_stock_price
 -- 
SELECT SUM(open)/COUNT(open) AS avg_open_price
FROM tutorial.aapl_historical_stock_price
--
select min(low) as min_price from tutorial.aapl_historical_stock_price 
--
select max(high-low) as p_diff
from tutorial.aapl_historical_stock_price
--
SELECT avg(volume) as avg_vol FROM tutorial.aapl_historical_stock_price
--
SELECT year,
       month,
       SUM(volume) AS volume_sum
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 ORDER BY year, month
--
select year, avg(close-open) as avg_daily_diff from tutorial.aapl_historical_stock_price
group by year
order by year
--
select year, avg(close-open) as avg_daily_diff from tutorial.aapl_historical_stock_price
group by 1
order by 1
--

SELECT year, month , sum(volume) as vol_sum from tutorial.aapl_historical_stock_price
group by year, month order by year, month
--
SELECT year,
       month,
       MIN(low) AS lowest_price,
       MAX(high) AS highest_price
  FROM tutorial.aapl_historical_stock_price
 GROUP BY 1, 2
 ORDER BY 1, 2
 --
 SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1
--
select player_name, state ,
       case when state= 'CA' then 'yes'
       else null end as cal_player
    from benn.college_football_players
    order by 3
 --   
SELECT player_name,
       state,
       CASE WHEN state = 'CA' THEN 'yes'
            ELSE NULL END AS from_california
  FROM benn.college_football_players
 ORDER BY 3
        
 --       
SELECT player_name,
       height,
       CASE WHEN height > 74 THEN 'over 74'
            WHEN height > 72 AND height <= 74 THEN '73-74'
            WHEN height > 70 AND height <= 72 THEN '71-72'
            ELSE 'under 70' END AS height_group
  FROM benn.college_football_players
  
 -- 
select *,
case when year='JR' OR year = 'SR' then player_name
else null end as upper_player from benn.college_football_players
--
SELECT *,
       CASE WHEN year IN ('JR', 'SR') THEN player_name ELSE NULL END AS upperclass_player_name
  FROM benn.college_football_players
--  
  
SELECT CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
            WHEN state = 'TX' THEN 'Texas'
            ELSE 'Other' END AS arbitrary_regional_designation,
            COUNT(1) AS players
  FROM benn.college_football_players
 WHERE weight >= 300
 GROUP BY 1
 --
 SELECT * from benn.college_football_players
 
 select sum(weight) as sum_wgt, case when year in ('FR', 'SO') then 'underclass_player'
 when year in ('JR','SR') then 'upperclass_player'
 else null end as plyr_category
 from benn.college_football_players
 where state= 'CA'
 group by 2
 --
 SELECT CASE WHEN year IN ('FR', 'SO') THEN 'underclass'
            WHEN year IN ('JR', 'SR') THEN 'upperclass'
            ELSE NULL END AS class_group,
       SUM(weight) AS combined_player_weight
  FROM benn.college_football_players
 WHERE state = 'CA'
 GROUP BY 1
--
SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
       COUNT(1) AS total_players
  FROM benn.college_football_players
 GROUP BY state
 ORDER BY total_players DESC
 --
 SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1
--
SELECT players.school_name,
       players.player_name,
       players.position,
       players.weight
  FROM benn.college_football_players players
 WHERE players.state = 'GA'
 ORDER BY players.weight DESC
 
 --
 
 SELECT teams.conference AS conference,
       AVG(players.weight) AS average_weight
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
 GROUP BY teams.conference
 ORDER BY AVG(players.weight) DESC

select * from benn.college_football_players 
--
select p.player_name, p.school_name, t.conference from benn.college_football_players p
join benn.college_football_teams t
on p.school_name= t.school_name
where t.division ='FBS (Division I-A Teams)'
--
select * from tutorial.crunchbase_companies
--
select count(c.permalink) as comp_rowcount ,
count(a.company_permalink) as acq_rowcount from tutorial.crunchbase_companies c
left join tutorial.crunchbase_acquisitions a
on c.name = a.company_name
--       
SELECT COUNT(companies.permalink) AS companies_rowcount,
       COUNT(acquisitions.company_permalink) AS acquisitions_rowcount
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
--
select count(distinct(c.name)) as comp_name ,
count(a.company_name) as acq_comp_name from tutorial.crunchbase_companies c
left join tutorial.crunchbase_acquisitions a
on c.name = a.company_name    
order by count(a.acquirer_name)

--
SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS unique_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS unique_companies_acquired
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
 WHERE companies.state_code IS NOT NULL
 GROUP BY 1
 ORDER BY 3 DESC
--

SELECT companies.name AS company_name,
       companies.status,
       COUNT(DISTINCT investments.investor_name) AS unqiue_investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 WHERE companies.state_code = 'NY'
 GROUP BY 1,2
 ORDER BY 3 DESC
 
 
 --
SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
            ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1
 ORDER BY 2 DESC
 
 --
 SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part1
 WHERE company_name ILIKE 'T%'
 
 UNION ALL

SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part2
 WHERE company_name ILIKE 'M%'

--
 SELECT 'investments_part1' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2

 UNION ALL
 
 SELECT 'investments_part2' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part2 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2
 
--
SELECT CAST(funding_total_usd AS varchar) AS funding_total_usd_string,
       founded_at_clean::varchar AS founded_at_string
  FROM tutorial.crunchbase_companies_clean_date
--
SELECT companies.category_code,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '3 years'
                       THEN 1 ELSE NULL END) AS acquired_3_yrs,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '5 years'
                       THEN 1 ELSE NULL END) AS acquired_5_yrs,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '10 years'
                       THEN 1 ELSE NULL END) AS acquired_10_yrs,
       COUNT(1) AS total
  FROM tutorial.crunchbase_companies_clean_date companies
  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions
    ON acquisitions.company_permalink = companies.permalink
 WHERE founded_at_clean IS NOT NULL
 GROUP BY 1
 ORDER BY 5 DESC
 --
 SELECT incidnt_num,
       date,
       LEFT(date, 10) AS cleaned_date
  FROM tutorial.sf_crime_incidents_2014_01
--
SELECT incidnt_num,
       date,
       LEFT(date, 10) AS cleaned_date,
       RIGHT(date, 17) AS cleaned_time
  FROM tutorial.sf_crime_incidents_2014_01
 -- 
SELECT incidnt_num,
       date,
       LEFT(date, 10) AS cleaned_date,
       RIGHT(date, LENGTH(date) - 11) AS cleaned_time
  FROM tutorial.sf_crime_incidents_2014_01
 --
SELECT incidnt_num,
       descript,
       POSITION('A' IN descript) AS a_position
  FROM tutorial.sf_crime_incidents_2014_01 
 --
SELECT CONCAT('(', lat, ', ', lon, ')') AS concat_location,
       location
  FROM tutorial.sf_crime_incidents_2014_01 
 --
 SELECT incidnt_num,
       date,
       SUBSTR(date, 4, 2) AS day
  FROM tutorial.sf_crime_incidents_2014_01
--
    SELECT incidnt_num,
           date,
           SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2) AS cleaned_date
      FROM tutorial.sf_crime_incidents_2014_01
--
   SELECT sub.*
      FROM (
            SELECT *
              FROM tutorial.sf_crime_incidents_2014_01
             WHERE descript = 'WARRANT ARREST'
           ) sub
     WHERE sub.resolution = 'NONE'
--   
     
SELECT *
  FROM tutorial.sf_crime_incidents_2014_01
 WHERE Date = (SELECT MIN(date)
                 FROM tutorial.sf_crime_incidents_2014_01
              )



  

